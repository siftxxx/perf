<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="342.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="325" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="325" > </text>
<g id="frames">
<g >
<title>execute_native_thread_routine (4 samples, 1.28%)</title><rect x="1174.9" y="213" width="15.1" height="15.0" fill="rgb(217,30,30)" rx="2" ry="2" />
<text  x="1177.92" y="223.5" ></text>
</g>
<g >
<title>execute_native_thread_routine (4 samples, 1.28%)</title><rect x="138.2" y="213" width="15.1" height="15.0" fill="rgb(243,16,14)" rx="2" ry="2" />
<text  x="141.18" y="223.5" ></text>
</g>
<g >
<title>curl_multi_wait (12 samples, 3.83%)</title><rect x="213.6" y="165" width="45.2" height="15.0" fill="rgb(254,40,48)" rx="2" ry="2" />
<text  x="216.58" y="175.5" >curl..</text>
</g>
<g >
<title>folly::futures::detail::retryingImpl&lt;folly::invoke_result&lt;cpputil::db2::redisproto::RandomBaseConnectionPool::get_base_connection (4 samples, 1.28%)</title><rect x="1144.8" y="149" width="15.0" height="15.0" fill="rgb(211,109,8)" rx="2" ry="2" />
<text  x="1147.76" y="159.5" ></text>
</g>
<g >
<title>__pthread_disable_asynccancel (2 samples, 0.64%)</title><rect x="462.4" y="165" width="7.5" height="15.0" fill="rgb(225,213,3)" rx="2" ry="2" />
<text  x="465.40" y="175.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (2 samples, 0.64%)</title><rect x="100.5" y="85" width="7.5" height="15.0" fill="rgb(229,76,22)" rx="2" ry="2" />
<text  x="103.48" y="95.5" ></text>
</g>
<g >
<title>archon::server::ThriftServer&lt;archon::fbthrift::TTServer&gt;::stats (4 samples, 1.28%)</title><rect x="123.1" y="245" width="15.1" height="15.0" fill="rgb(212,207,13)" rx="2" ry="2" />
<text  x="126.10" y="255.5" ></text>
</g>
<g >
<title>__libc_disable_asynccancel (2 samples, 0.64%)</title><rect x="217.3" y="117" width="7.6" height="15.0" fill="rgb(208,97,35)" rx="2" ry="2" />
<text  x="220.35" y="127.5" ></text>
</g>
<g >
<title>folly::EventBase::loopBody (8 samples, 2.56%)</title><rect x="77.9" y="149" width="30.1" height="15.0" fill="rgb(246,114,32)" rx="2" ry="2" />
<text  x="80.86" y="159.5" >fo..</text>
</g>
<g >
<title>epoll_wait (8 samples, 2.56%)</title><rect x="77.9" y="101" width="30.1" height="15.0" fill="rgb(240,41,35)" rx="2" ry="2" />
<text  x="80.86" y="111.5" >ep..</text>
</g>
<g >
<title>archon::lb::ServiceUpdater::update (4 samples, 1.28%)</title><rect x="10.0" y="197" width="15.1" height="15.0" fill="rgb(210,7,17)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>__dynamic_cast (1 samples, 0.32%)</title><rect x="25.1" y="245" width="3.7" height="15.0" fill="rgb(228,33,54)" rx="2" ry="2" />
<text  x="28.08" y="255.5" ></text>
</g>
<g >
<title>__libc_disable_asynccancel (1 samples, 0.32%)</title><rect x="605.7" y="149" width="3.7" height="15.0" fill="rgb(235,112,30)" rx="2" ry="2" />
<text  x="608.65" y="159.5" ></text>
</g>
<g >
<title>epoll_dispatch (8 samples, 2.56%)</title><rect x="77.9" y="117" width="30.1" height="15.0" fill="rgb(218,57,44)" rx="2" ry="2" />
<text  x="80.86" y="127.5" >ep..</text>
</g>
<g >
<title>start_thread (4 samples, 1.28%)</title><rect x="138.2" y="229" width="15.1" height="15.0" fill="rgb(218,41,48)" rx="2" ry="2" />
<text  x="141.18" y="239.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;archon::common::EventLoop::EventLoop (8 samples, 2.56%)</title><rect x="77.9" y="197" width="30.1" height="15.0" fill="rgb(251,125,31)" rx="2" ry="2" />
<text  x="80.86" y="207.5" >st..</text>
</g>
<g >
<title>cpputil::intervene::ContentControl::back_get_conf (4 samples, 1.28%)</title><rect x="620.7" y="197" width="15.1" height="15.0" fill="rgb(239,1,13)" rx="2" ry="2" />
<text  x="623.73" y="207.5" ></text>
</g>
<g >
<title>native_irq_return_iret (3 samples, 0.96%)</title><rect x="620.7" y="149" width="11.3" height="15.0" fill="rgb(205,2,26)" rx="2" ry="2" />
<text  x="623.73" y="159.5" ></text>
</g>
<g >
<title>__pthread_disable_asynccancel (1 samples, 0.32%)</title><rect x="1174.9" y="133" width="3.8" height="15.0" fill="rgb(214,186,46)" rx="2" ry="2" />
<text  x="1177.92" y="143.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (1 samples, 0.32%)</title><rect x="119.3" y="133" width="3.8" height="15.0" fill="rgb(254,8,31)" rx="2" ry="2" />
<text  x="122.33" y="143.5" ></text>
</g>
<g >
<title>all (313 samples, 100%)</title><rect x="10.0" y="293" width="1180.0" height="15.0" fill="rgb(252,53,24)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>execute_native_thread_routine (4 samples, 1.28%)</title><rect x="108.0" y="213" width="15.1" height="15.0" fill="rgb(236,91,33)" rx="2" ry="2" />
<text  x="111.02" y="223.5" ></text>
</g>
<g >
<title>__pthread_disable_asynccancel (1 samples, 0.32%)</title><rect x="319.1" y="213" width="3.8" height="15.0" fill="rgb(244,179,52)" rx="2" ry="2" />
<text  x="322.14" y="223.5" ></text>
</g>
<g >
<title>curl_easy_perform (12 samples, 3.83%)</title><rect x="213.6" y="181" width="45.2" height="15.0" fill="rgb(248,79,19)" rx="2" ry="2" />
<text  x="216.58" y="191.5" >curl..</text>
</g>
<g >
<title>cpputil::consul::lookup_name (12 samples, 3.83%)</title><rect x="213.6" y="245" width="45.2" height="15.0" fill="rgb(252,136,42)" rx="2" ry="2" />
<text  x="216.58" y="255.5" >cppu..</text>
</g>
<g >
<title>syscall_return_via_sysret (1 samples, 0.32%)</title><rect x="632.0" y="149" width="3.8" height="15.0" fill="rgb(239,47,2)" rx="2" ry="2" />
<text  x="635.04" y="159.5" ></text>
</g>
<g >
<title>native_irq_return_iret (2 samples, 0.64%)</title><rect x="307.8" y="213" width="7.6" height="15.0" fill="rgb(215,49,4)" rx="2" ry="2" />
<text  x="310.83" y="223.5" ></text>
</g>
<g >
<title>folly::EventBase::loop (8 samples, 2.56%)</title><rect x="77.9" y="165" width="30.1" height="15.0" fill="rgb(239,79,34)" rx="2" ry="2" />
<text  x="80.86" y="175.5" >fo..</text>
</g>
<g >
<title>native_irq_return_iret (2 samples, 0.64%)</title><rect x="1163.6" y="229" width="7.6" height="15.0" fill="rgb(232,106,39)" rx="2" ry="2" />
<text  x="1166.61" y="239.5" ></text>
</g>
<g >
<title>__nanosleep (4 samples, 1.28%)</title><rect x="424.7" y="181" width="15.1" height="15.0" fill="rgb(239,227,34)" rx="2" ry="2" />
<text  x="427.70" y="191.5" ></text>
</g>
<g >
<title>__nanosleep (7 samples, 2.24%)</title><rect x="579.3" y="181" width="26.4" height="15.0" fill="rgb(214,43,45)" rx="2" ry="2" />
<text  x="582.27" y="191.5" >_..</text>
</g>
<g >
<title>conf_reloader (28 samples, 8.95%)</title><rect x="153.3" y="277" width="105.5" height="15.0" fill="rgb(215,112,32)" rx="2" ry="2" />
<text  x="156.26" y="287.5" >conf_reloader</text>
</g>
<g >
<title>syscall_return_via_sysret (1 samples, 0.32%)</title><rect x="21.3" y="165" width="3.8" height="15.0" fill="rgb(205,156,35)" rx="2" ry="2" />
<text  x="24.31" y="175.5" ></text>
</g>
<g >
<title>curl_multi_wait (12 samples, 3.83%)</title><rect x="32.6" y="165" width="45.3" height="15.0" fill="rgb(210,90,29)" rx="2" ry="2" />
<text  x="35.62" y="175.5" >curl..</text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;cpputil::backtrace::InitSignalHandler (19 samples, 6.07%)</title><rect x="813.0" y="197" width="71.6" height="15.0" fill="rgb(230,36,53)" rx="2" ry="2" />
<text  x="816.00" y="207.5" >std::thr..</text>
</g>
<g >
<title>__clone (4 samples, 1.28%)</title><rect x="10.0" y="245" width="15.1" height="15.0" fill="rgb(249,150,30)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>folly::fibers::Baton::waitThread (1 samples, 0.32%)</title><rect x="884.6" y="149" width="3.8" height="15.0" fill="rgb(238,200,24)" rx="2" ry="2" />
<text  x="887.63" y="159.5" ></text>
</g>
<g >
<title>__nanosleep (4 samples, 1.28%)</title><rect x="620.7" y="165" width="15.1" height="15.0" fill="rgb(206,5,35)" rx="2" ry="2" />
<text  x="623.73" y="175.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (1 samples, 0.32%)</title><rect x="134.4" y="213" width="3.8" height="15.0" fill="rgb(213,91,7)" rx="2" ry="2" />
<text  x="137.41" y="223.5" ></text>
</g>
<g >
<title>do_futex_wait (4 samples, 1.28%)</title><rect x="1174.9" y="149" width="15.1" height="15.0" fill="rgb(225,79,48)" rx="2" ry="2" />
<text  x="1177.92" y="159.5" ></text>
</g>
<g >
<title>std::locale::operator= (1 samples, 0.32%)</title><rect x="345.5" y="117" width="3.8" height="15.0" fill="rgb(237,126,13)" rx="2" ry="2" />
<text  x="348.53" y="127.5" ></text>
</g>
<g >
<title>cpputil::bytedtrace::reporter::AgentProvider::flush (4 samples, 1.28%)</title><rect x="108.0" y="197" width="15.1" height="15.0" fill="rgb(250,202,21)" rx="2" ry="2" />
<text  x="111.02" y="207.5" ></text>
</g>
<g >
<title>folly::EventBase::loopForever (8 samples, 2.56%)</title><rect x="77.9" y="181" width="30.1" height="15.0" fill="rgb(253,163,30)" rx="2" ry="2" />
<text  x="80.86" y="191.5" >fo..</text>
</g>
<g >
<title>__clone (8 samples, 2.56%)</title><rect x="77.9" y="245" width="30.1" height="15.0" fill="rgb(246,161,4)" rx="2" ry="2" />
<text  x="80.86" y="255.5" >__..</text>
</g>
<g >
<title>folly::detail::Futex&lt;std::atomic&gt;::futexWaitImpl (1 samples, 0.32%)</title><rect x="884.6" y="69" width="3.8" height="15.0" fill="rgb(210,151,54)" rx="2" ry="2" />
<text  x="887.63" y="79.5" ></text>
</g>
<g >
<title>boost::this_thread::disable_interruption::disable_interruption (1 samples, 0.32%)</title><rect x="417.2" y="245" width="3.7" height="15.0" fill="rgb(212,183,25)" rx="2" ry="2" />
<text  x="420.16" y="255.5" ></text>
</g>
<g >
<title>cpputil::metrics2::MetricCollector::send_emit_message (2 samples, 0.64%)</title><rect x="345.5" y="181" width="7.6" height="15.0" fill="rgb(253,139,51)" rx="2" ry="2" />
<text  x="348.53" y="191.5" ></text>
</g>
<g >
<title>native_irq_return_iret (6 samples, 1.92%)</title><rect x="270.1" y="101" width="22.6" height="15.0" fill="rgb(211,50,2)" rx="2" ry="2" />
<text  x="273.13" y="111.5" >n..</text>
</g>
<g >
<title>__poll (11 samples, 3.51%)</title><rect x="217.3" y="133" width="41.5" height="15.0" fill="rgb(231,149,12)" rx="2" ry="2" />
<text  x="220.35" y="143.5" >__p..</text>
</g>
<g >
<title>folly::Future&lt;int&gt;::get (1 samples, 0.32%)</title><rect x="884.6" y="229" width="3.8" height="15.0" fill="rgb(218,49,48)" rx="2" ry="2" />
<text  x="887.63" y="239.5" ></text>
</g>
<g >
<title>__pthread_disable_asynccancel (2 samples, 0.64%)</title><rect x="820.5" y="165" width="7.6" height="15.0" fill="rgb(240,13,22)" rx="2" ry="2" />
<text  x="823.54" y="175.5" ></text>
</g>
<g >
<title>cpputil::tcc::v2::Client::refresh (39 samples, 12.46%)</title><rect x="666.0" y="197" width="147.0" height="15.0" fill="rgb(218,106,1)" rx="2" ry="2" />
<text  x="668.97" y="207.5" >cpputil::tcc::v2::..</text>
</g>
<g >
<title>native_irq_return_iret (10 samples, 3.19%)</title><rect x="828.1" y="165" width="37.7" height="15.0" fill="rgb(220,28,13)" rx="2" ry="2" />
<text  x="831.08" y="175.5" >nat..</text>
</g>
<g >
<title>syscall_return_via_sysret (3 samples, 0.96%)</title><rect x="66.5" y="117" width="11.4" height="15.0" fill="rgb(214,59,40)" rx="2" ry="2" />
<text  x="69.55" y="127.5" ></text>
</g>
<g >
<title>curl_easy_perform (12 samples, 3.83%)</title><rect x="32.6" y="181" width="45.3" height="15.0" fill="rgb(238,194,28)" rx="2" ry="2" />
<text  x="35.62" y="191.5" >curl..</text>
</g>
<g >
<title>redisContextWaitReady (4 samples, 1.28%)</title><rect x="1144.8" y="69" width="15.0" height="15.0" fill="rgb(229,146,8)" rx="2" ry="2" />
<text  x="1147.76" y="79.5" ></text>
</g>
<g >
<title>LOGCXX::QueueBuffer::TryPop (1 samples, 0.32%)</title><rect x="458.6" y="181" width="3.8" height="15.0" fill="rgb(224,108,13)" rx="2" ry="2" />
<text  x="461.63" y="191.5" ></text>
</g>
<g >
<title>api::GroupInfoRetrieverLMC::clean_cache (2 samples, 0.64%)</title><rect x="345.5" y="229" width="7.6" height="15.0" fill="rgb(244,45,52)" rx="2" ry="2" />
<text  x="348.53" y="239.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (1 samples, 0.32%)</title><rect x="149.5" y="165" width="3.8" height="15.0" fill="rgb(238,153,23)" rx="2" ry="2" />
<text  x="152.49" y="175.5" ></text>
</g>
<g >
<title>pthread_mutex_unlock@plt (1 samples, 0.32%)</title><rect x="420.9" y="245" width="3.8" height="15.0" fill="rgb(230,8,53)" rx="2" ry="2" />
<text  x="423.93" y="255.5" ></text>
</g>
<g >
<title>cpputil::db2::redisproto::RedisClient::mget (4 samples, 1.28%)</title><rect x="1144.8" y="229" width="15.0" height="15.0" fill="rgb(205,99,30)" rx="2" ry="2" />
<text  x="1147.76" y="239.5" ></text>
</g>
<g >
<title>pthread_cond_timedwait@@GLIBC_2.3.2 (4 samples, 1.28%)</title><rect x="10.0" y="181" width="15.1" height="15.0" fill="rgb(220,187,46)" rx="2" ry="2" />
<text  x="13.00" y="191.5" ></text>
</g>
<g >
<title>redisConnectWithOptions (4 samples, 1.28%)</title><rect x="1144.8" y="101" width="15.0" height="15.0" fill="rgb(252,28,7)" rx="2" ry="2" />
<text  x="1147.76" y="111.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (3 samples, 0.96%)</title><rect x="292.7" y="101" width="11.4" height="15.0" fill="rgb(211,179,24)" rx="2" ry="2" />
<text  x="295.75" y="111.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (1 samples, 0.32%)</title><rect x="1171.2" y="229" width="3.7" height="15.0" fill="rgb(212,95,29)" rx="2" ry="2" />
<text  x="1174.15" y="239.5" ></text>
</g>
<g >
<title>native_irq_return_iret (2 samples, 0.64%)</title><rect x="1133.5" y="197" width="7.5" height="15.0" fill="rgb(230,56,50)" rx="2" ry="2" />
<text  x="1136.45" y="207.5" ></text>
</g>
<g >
<title>native_irq_return_iret (2 samples, 0.64%)</title><rect x="141.9" y="165" width="7.6" height="15.0" fill="rgb(240,72,33)" rx="2" ry="2" />
<text  x="144.95" y="175.5" ></text>
</g>
<g >
<title>agent_provider (4 samples, 1.28%)</title><rect x="108.0" y="277" width="15.1" height="15.0" fill="rgb(217,216,36)" rx="2" ry="2" />
<text  x="111.02" y="287.5" ></text>
</g>
<g >
<title>__poll (12 samples, 3.83%)</title><rect x="32.6" y="133" width="45.3" height="15.0" fill="rgb(245,60,11)" rx="2" ry="2" />
<text  x="35.62" y="143.5" >__poll</text>
</g>
<g >
<title>__libc_disable_asynccancel (2 samples, 0.64%)</title><rect x="262.6" y="101" width="7.5" height="15.0" fill="rgb(227,224,47)" rx="2" ry="2" />
<text  x="265.59" y="111.5" ></text>
</g>
<g >
<title>execute_native_thread_routine (16 samples, 5.11%)</title><rect x="153.3" y="213" width="60.3" height="15.0" fill="rgb(250,203,23)" rx="2" ry="2" />
<text  x="156.26" y="223.5" >execut..</text>
</g>
<g >
<title>syscall_return_via_sysret (5 samples, 1.60%)</title><rect x="865.8" y="165" width="18.8" height="15.0" fill="rgb(216,121,45)" rx="2" ry="2" />
<text  x="868.78" y="175.5" ></text>
</g>
<g >
<title>start_thread (4 samples, 1.28%)</title><rect x="108.0" y="229" width="15.1" height="15.0" fill="rgb(250,32,19)" rx="2" ry="2" />
<text  x="111.02" y="239.5" ></text>
</g>
<g >
<title>LOGCXX::Logger::TimeOut (8 samples, 2.56%)</title><rect x="575.5" y="197" width="30.2" height="15.0" fill="rgb(220,139,23)" rx="2" ry="2" />
<text  x="578.50" y="207.5" >LO..</text>
</g>
<g >
<title>native_irq_return_iret (2 samples, 0.64%)</title><rect x="111.8" y="133" width="7.5" height="15.0" fill="rgb(242,94,50)" rx="2" ry="2" />
<text  x="114.79" y="143.5" ></text>
</g>
<g >
<title>sem_timedwait (4 samples, 1.28%)</title><rect x="108.0" y="181" width="15.1" height="15.0" fill="rgb(225,117,20)" rx="2" ry="2" />
<text  x="111.02" y="191.5" ></text>
</g>
<g >
<title>native_irq_return_iret (2 samples, 0.64%)</title><rect x="126.9" y="213" width="7.5" height="15.0" fill="rgb(249,78,31)" rx="2" ry="2" />
<text  x="129.87" y="223.5" ></text>
</g>
<g >
<title>start_thread (118 samples, 37.70%)</title><rect x="439.8" y="229" width="444.8" height="15.0" fill="rgb(247,49,12)" rx="2" ry="2" />
<text  x="442.78" y="239.5" >start_thread</text>
</g>
<g >
<title>native_irq_return_iret (3 samples, 0.96%)</title><rect x="424.7" y="165" width="11.3" height="15.0" fill="rgb(250,64,17)" rx="2" ry="2" />
<text  x="427.70" y="175.5" ></text>
</g>
<g >
<title>redisConnectWithTimeout (4 samples, 1.28%)</title><rect x="1144.8" y="117" width="15.0" height="15.0" fill="rgb(241,94,5)" rx="2" ry="2" />
<text  x="1147.76" y="127.5" ></text>
</g>
<g >
<title>async_flushing (4 samples, 1.28%)</title><rect x="138.2" y="277" width="15.1" height="15.0" fill="rgb(249,14,31)" rx="2" ry="2" />
<text  x="141.18" y="287.5" ></text>
</g>
<g >
<title>ares__is_list_empty (1 samples, 0.32%)</title><rect x="28.8" y="245" width="3.8" height="15.0" fill="rgb(241,69,4)" rx="2" ry="2" />
<text  x="31.85" y="255.5" ></text>
</g>
<g >
<title>Curl_poll (1 samples, 0.32%)</title><rect x="258.8" y="245" width="3.8" height="15.0" fill="rgb(252,105,43)" rx="2" ry="2" />
<text  x="261.82" y="255.5" ></text>
</g>
<g >
<title>knitter_dag.492 (16 samples, 5.11%)</title><rect x="258.8" y="277" width="60.3" height="15.0" fill="rgb(239,214,0)" rx="2" ry="2" />
<text  x="261.82" y="287.5" >knitte..</text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (1 samples, 0.32%)</title><rect x="345.5" y="149" width="3.8" height="15.0" fill="rgb(208,80,30)" rx="2" ry="2" />
<text  x="348.53" y="159.5" ></text>
</g>
<g >
<title>knitter_dag.498 (4 samples, 1.28%)</title><rect x="424.7" y="277" width="15.1" height="15.0" fill="rgb(235,58,21)" rx="2" ry="2" />
<text  x="427.70" y="287.5" ></text>
</g>
<g >
<title>[unknown] (8 samples, 2.56%)</title><rect x="77.9" y="261" width="30.1" height="15.0" fill="rgb(220,228,21)" rx="2" ry="2" />
<text  x="80.86" y="271.5" >[u..</text>
</g>
<g >
<title>folly::futures::detail::waitImpl&lt;folly::Future&lt;int&gt;, int&gt; (1 samples, 0.32%)</title><rect x="884.6" y="197" width="3.8" height="15.0" fill="rgb(233,205,20)" rx="2" ry="2" />
<text  x="887.63" y="207.5" ></text>
</g>
<g >
<title>demotion::Demotion::sync_thread (15 samples, 4.79%)</title><rect x="262.6" y="245" width="56.5" height="15.0" fill="rgb(220,40,0)" rx="2" ry="2" />
<text  x="265.59" y="255.5" >demot..</text>
</g>
<g >
<title>execute_native_thread_routine (15 samples, 4.79%)</title><rect x="360.6" y="213" width="56.6" height="15.0" fill="rgb(239,117,46)" rx="2" ry="2" />
<text  x="363.61" y="223.5" >execu..</text>
</g>
<g >
<title>syscall_return_via_sysret (2 samples, 0.64%)</title><rect x="598.1" y="165" width="7.6" height="15.0" fill="rgb(251,51,23)" rx="2" ry="2" />
<text  x="601.12" y="175.5" ></text>
</g>
<g >
<title>ServiceUpdater (18 samples, 5.75%)</title><rect x="10.0" y="277" width="67.9" height="15.0" fill="rgb(213,19,18)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >Service..</text>
</g>
<g >
<title>_redisContextConnectTcp (4 samples, 1.28%)</title><rect x="1144.8" y="85" width="15.0" height="15.0" fill="rgb(225,69,19)" rx="2" ry="2" />
<text  x="1147.76" y="95.5" ></text>
</g>
<g >
<title>folly::Future&lt;int&gt;::wait (1 samples, 0.32%)</title><rect x="884.6" y="213" width="3.8" height="15.0" fill="rgb(229,43,7)" rx="2" ry="2" />
<text  x="887.63" y="223.5" ></text>
</g>
<g >
<title>cpputil::metrics2::MetricCollector::emit_message (2 samples, 0.64%)</title><rect x="345.5" y="213" width="7.6" height="15.0" fill="rgb(253,215,54)" rx="2" ry="2" />
<text  x="348.53" y="223.5" ></text>
</g>
<g >
<title>[unknown] (4 samples, 1.28%)</title><rect x="108.0" y="261" width="15.1" height="15.0" fill="rgb(234,5,27)" rx="2" ry="2" />
<text  x="111.02" y="271.5" ></text>
</g>
<g >
<title>[unknown] (4 samples, 1.28%)</title><rect x="1174.9" y="261" width="15.1" height="15.0" fill="rgb(222,5,34)" rx="2" ry="2" />
<text  x="1177.92" y="271.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (4 samples, 1.28%)</title><rect x="198.5" y="165" width="15.1" height="15.0" fill="rgb(244,151,4)" rx="2" ry="2" />
<text  x="201.50" y="175.5" ></text>
</g>
<g >
<title>demotion::Consul::get_kv (11 samples, 3.51%)</title><rect x="262.6" y="229" width="41.5" height="15.0" fill="rgb(249,104,19)" rx="2" ry="2" />
<text  x="265.59" y="239.5" >dem..</text>
</g>
<g >
<title>__new_sem_wait_slow (63 samples, 20.13%)</title><rect x="892.2" y="213" width="237.5" height="15.0" fill="rgb(205,7,50)" rx="2" ry="2" />
<text  x="895.17" y="223.5" >__new_sem_wait_slow</text>
</g>
<g >
<title>pthread_cond_timedwait@@GLIBC_2.3.2 (4 samples, 1.28%)</title><rect x="304.1" y="229" width="15.0" height="15.0" fill="rgb(222,118,52)" rx="2" ry="2" />
<text  x="307.06" y="239.5" ></text>
</g>
<g >
<title>knitter_dag.495 (10 samples, 3.19%)</title><rect x="319.1" y="277" width="37.7" height="15.0" fill="rgb(217,213,26)" rx="2" ry="2" />
<text  x="322.14" y="287.5" >kni..</text>
</g>
<g >
<title>__sleep (4 samples, 1.28%)</title><rect x="620.7" y="181" width="15.1" height="15.0" fill="rgb(212,63,27)" rx="2" ry="2" />
<text  x="623.73" y="191.5" ></text>
</g>
<g >
<title>do_futex_wait (57 samples, 18.21%)</title><rect x="914.8" y="197" width="214.9" height="15.0" fill="rgb(212,38,36)" rx="2" ry="2" />
<text  x="917.79" y="207.5" >do_futex_wait</text>
</g>
<g >
<title>cpputil::tcc::general::Cache::refresh (4 samples, 1.28%)</title><rect x="650.9" y="197" width="15.1" height="15.0" fill="rgb(232,125,41)" rx="2" ry="2" />
<text  x="653.89" y="207.5" ></text>
</g>
<g >
<title>__clone (118 samples, 37.70%)</title><rect x="439.8" y="245" width="444.8" height="15.0" fill="rgb(235,123,32)" rx="2" ry="2" />
<text  x="442.78" y="255.5" >__clone</text>
</g>
<g >
<title>__pthread_once (1 samples, 0.32%)</title><rect x="349.3" y="117" width="3.8" height="15.0" fill="rgb(206,179,53)" rx="2" ry="2" />
<text  x="352.30" y="127.5" ></text>
</g>
<g >
<title>folly::detail::MemoryIdler::futexWait&lt;std::atomic, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (1 samples, 0.32%)</title><rect x="884.6" y="133" width="3.8" height="15.0" fill="rgb(221,62,12)" rx="2" ry="2" />
<text  x="887.63" y="143.5" ></text>
</g>
<g >
<title>start_thread (8 samples, 2.56%)</title><rect x="77.9" y="229" width="30.1" height="15.0" fill="rgb(234,76,46)" rx="2" ry="2" />
<text  x="80.86" y="239.5" >st..</text>
</g>
<g >
<title>cpputil::metrics2::MetricAsync::ThreadLoop (4 samples, 1.28%)</title><rect x="138.2" y="197" width="15.1" height="15.0" fill="rgb(220,170,21)" rx="2" ry="2" />
<text  x="141.18" y="207.5" ></text>
</g>
<g >
<title>VersionManagerSdk::ABMeta::updateMetaThread (4 samples, 1.28%)</title><rect x="605.7" y="197" width="15.0" height="15.0" fill="rgb(216,219,35)" rx="2" ry="2" />
<text  x="608.65" y="207.5" ></text>
</g>
<g >
<title>[unknown] (4 samples, 1.28%)</title><rect x="138.2" y="261" width="15.1" height="15.0" fill="rgb(229,201,38)" rx="2" ry="2" />
<text  x="141.18" y="271.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (1 samples, 0.32%)</title><rect x="1141.0" y="197" width="3.8" height="15.0" fill="rgb(217,153,3)" rx="2" ry="2" />
<text  x="1143.99" y="207.5" ></text>
</g>
<g >
<title>native_irq_return_iret (6 samples, 1.92%)</title><rect x="43.9" y="117" width="22.6" height="15.0" fill="rgb(241,93,23)" rx="2" ry="2" />
<text  x="46.93" y="127.5" >n..</text>
</g>
<g >
<title>pthread_cond_timedwait@@GLIBC_2.3.2 (4 samples, 1.28%)</title><rect x="138.2" y="181" width="15.1" height="15.0" fill="rgb(210,126,2)" rx="2" ry="2" />
<text  x="141.18" y="191.5" ></text>
</g>
<g >
<title>sem_timedwait (63 samples, 20.13%)</title><rect x="892.2" y="229" width="237.5" height="15.0" fill="rgb(216,42,0)" rx="2" ry="2" />
<text  x="895.17" y="239.5" >sem_timedwait</text>
</g>
<g >
<title>execute_native_thread_routine (4 samples, 1.28%)</title><rect x="424.7" y="213" width="15.1" height="15.0" fill="rgb(213,39,28)" rx="2" ry="2" />
<text  x="427.70" y="223.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (2 samples, 0.64%)</title><rect x="338.0" y="213" width="7.5" height="15.0" fill="rgb(205,16,35)" rx="2" ry="2" />
<text  x="340.99" y="223.5" ></text>
</g>
<g >
<title>__poll (4 samples, 1.28%)</title><rect x="1144.8" y="53" width="15.0" height="15.0" fill="rgb(215,154,14)" rx="2" ry="2" />
<text  x="1147.76" y="63.5" ></text>
</g>
<g >
<title>event_base_loop (8 samples, 2.56%)</title><rect x="77.9" y="133" width="30.1" height="15.0" fill="rgb(236,84,41)" rx="2" ry="2" />
<text  x="80.86" y="143.5" >ev..</text>
</g>
<g >
<title>native_irq_return_iret (8 samples, 2.56%)</title><rect x="371.9" y="165" width="30.2" height="15.0" fill="rgb(211,173,44)" rx="2" ry="2" />
<text  x="374.92" y="175.5" >na..</text>
</g>
<g >
<title>cpputil::consul::ServiceDiscovery::translateName (12 samples, 3.83%)</title><rect x="32.6" y="229" width="45.3" height="15.0" fill="rgb(240,105,35)" rx="2" ry="2" />
<text  x="35.62" y="239.5" >cppu..</text>
</g>
<g >
<title>__sleep (4 samples, 1.28%)</title><rect x="605.7" y="181" width="15.0" height="15.0" fill="rgb(233,13,29)" rx="2" ry="2" />
<text  x="608.65" y="191.5" ></text>
</g>
<g >
<title>cpputil::db2::redisproto::RandomBaseConnectionPool::get_base_connection (4 samples, 1.28%)</title><rect x="1144.8" y="165" width="15.0" height="15.0" fill="rgb(206,34,49)" rx="2" ry="2" />
<text  x="1147.76" y="175.5" ></text>
</g>
<g >
<title>start_thread (15 samples, 4.79%)</title><rect x="360.6" y="229" width="56.6" height="15.0" fill="rgb(254,223,15)" rx="2" ry="2" />
<text  x="363.61" y="239.5" >start..</text>
</g>
<g >
<title>Curl_poll (12 samples, 3.83%)</title><rect x="213.6" y="149" width="45.2" height="15.0" fill="rgb(209,31,8)" rx="2" ry="2" />
<text  x="216.58" y="159.5" >Curl..</text>
</g>
<g >
<title>__pthread_enable_asynccancel (1 samples, 0.32%)</title><rect x="469.9" y="165" width="3.8" height="15.0" fill="rgb(224,42,31)" rx="2" ry="2" />
<text  x="472.94" y="175.5" ></text>
</g>
<g >
<title>cpputil::consul::make_request (11 samples, 3.51%)</title><rect x="262.6" y="181" width="41.5" height="15.0" fill="rgb(244,14,15)" rx="2" ry="2" />
<text  x="265.59" y="191.5" >cpp..</text>
</g>
<g >
<title>__pthread_disable_asynccancel (1 samples, 0.32%)</title><rect x="304.1" y="213" width="3.7" height="15.0" fill="rgb(245,165,51)" rx="2" ry="2" />
<text  x="307.06" y="223.5" ></text>
</g>
<g >
<title>cpputil::consul::make_request (12 samples, 3.83%)</title><rect x="32.6" y="197" width="45.3" height="15.0" fill="rgb(246,157,32)" rx="2" ry="2" />
<text  x="35.62" y="207.5" >cppu..</text>
</g>
<g >
<title>native_irq_return_iret (2 samples, 0.64%)</title><rect x="1178.7" y="133" width="7.5" height="15.0" fill="rgb(249,180,52)" rx="2" ry="2" />
<text  x="1181.69" y="143.5" ></text>
</g>
<g >
<title>sem_timedwait (4 samples, 1.28%)</title><rect x="1174.9" y="181" width="15.1" height="15.0" fill="rgb(231,160,51)" rx="2" ry="2" />
<text  x="1177.92" y="191.5" ></text>
</g>
<g >
<title>do_futex_wait (4 samples, 1.28%)</title><rect x="108.0" y="149" width="15.1" height="15.0" fill="rgb(220,226,7)" rx="2" ry="2" />
<text  x="111.02" y="159.5" ></text>
</g>
<g >
<title>__new_sem_wait_slow (4 samples, 1.28%)</title><rect x="1174.9" y="165" width="15.1" height="15.0" fill="rgb(233,111,26)" rx="2" ry="2" />
<text  x="1177.92" y="175.5" ></text>
</g>
<g >
<title>start_thread (4 samples, 1.28%)</title><rect x="424.7" y="229" width="15.1" height="15.0" fill="rgb(248,79,19)" rx="2" ry="2" />
<text  x="427.70" y="239.5" ></text>
</g>
<g >
<title>__nanosleep (34 samples, 10.86%)</title><rect x="684.8" y="181" width="128.2" height="15.0" fill="rgb(250,177,29)" rx="2" ry="2" />
<text  x="687.82" y="191.5" >__nanosleep</text>
</g>
<g >
<title>native_irq_return_iret (4 samples, 1.28%)</title><rect x="322.9" y="213" width="15.1" height="15.0" fill="rgb(225,54,0)" rx="2" ry="2" />
<text  x="325.91" y="223.5" ></text>
</g>
<g >
<title>vfprintf (1 samples, 0.32%)</title><rect x="353.1" y="245" width="3.7" height="15.0" fill="rgb(240,188,34)" rx="2" ry="2" />
<text  x="356.07" y="255.5" ></text>
</g>
<g >
<title>__clone (4 samples, 1.28%)</title><rect x="424.7" y="245" width="15.1" height="15.0" fill="rgb(244,192,13)" rx="2" ry="2" />
<text  x="427.70" y="255.5" ></text>
</g>
<g >
<title>native_irq_return_iret (4 samples, 1.28%)</title><rect x="85.4" y="85" width="15.1" height="15.0" fill="rgb(225,214,38)" rx="2" ry="2" />
<text  x="88.40" y="95.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (1 samples, 0.32%)</title><rect x="662.2" y="165" width="3.8" height="15.0" fill="rgb(244,175,39)" rx="2" ry="2" />
<text  x="665.20" y="175.5" ></text>
</g>
<g >
<title>[unknown] (4 samples, 1.28%)</title><rect x="424.7" y="261" width="15.1" height="15.0" fill="rgb(237,52,13)" rx="2" ry="2" />
<text  x="427.70" y="271.5" ></text>
</g>
<g >
<title>cpputil::intervene::EcologyControl::back_get_conf (4 samples, 1.28%)</title><rect x="635.8" y="197" width="15.1" height="15.0" fill="rgb(229,51,48)" rx="2" ry="2" />
<text  x="638.81" y="207.5" ></text>
</g>
<g >
<title>native_irq_return_iret (32 samples, 10.22%)</title><rect x="948.7" y="181" width="120.7" height="15.0" fill="rgb(246,156,45)" rx="2" ry="2" />
<text  x="951.72" y="191.5" >native_irq_retu..</text>
</g>
<g >
<title>cpputil::consul::make_request (12 samples, 3.83%)</title><rect x="213.6" y="197" width="45.2" height="15.0" fill="rgb(224,133,23)" rx="2" ry="2" />
<text  x="216.58" y="207.5" >cppu..</text>
</g>
<g >
<title>native_irq_return_iret (18 samples, 5.75%)</title><rect x="473.7" y="165" width="67.9" height="15.0" fill="rgb(240,8,22)" rx="2" ry="2" />
<text  x="476.71" y="175.5" >native_..</text>
</g>
<g >
<title>folly::detail::Futex&lt;std::atomic&gt;::futexWaitUntil&lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (1 samples, 0.32%)</title><rect x="884.6" y="101" width="3.8" height="15.0" fill="rgb(219,191,53)" rx="2" ry="2" />
<text  x="887.63" y="111.5" ></text>
</g>
<g >
<title>syscall (3 samples, 0.96%)</title><rect x="1163.6" y="245" width="11.3" height="15.0" fill="rgb(236,222,39)" rx="2" ry="2" />
<text  x="1166.61" y="255.5" ></text>
</g>
<g >
<title>folly::detail::(anonymous namespace)::nativeFutexWaitImpl (3 samples, 0.96%)</title><rect x="1163.6" y="261" width="11.3" height="15.0" fill="rgb(218,118,54)" rx="2" ry="2" />
<text  x="1166.61" y="271.5" ></text>
</g>
<g >
<title>curl_multi_wait (11 samples, 3.51%)</title><rect x="262.6" y="149" width="41.5" height="15.0" fill="rgb(240,103,53)" rx="2" ry="2" />
<text  x="265.59" y="159.5" >cur..</text>
</g>
<g >
<title>__pthread_disable_asynccancel (1 samples, 0.32%)</title><rect x="10.0" y="165" width="3.8" height="15.0" fill="rgb(222,43,24)" rx="2" ry="2" />
<text  x="13.00" y="175.5" ></text>
</g>
<g >
<title>[unknown] (18 samples, 5.75%)</title><rect x="10.0" y="261" width="67.9" height="15.0" fill="rgb(249,71,13)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >[unknown]</text>
</g>
<g >
<title>__clone (15 samples, 4.79%)</title><rect x="360.6" y="245" width="56.6" height="15.0" fill="rgb(227,176,1)" rx="2" ry="2" />
<text  x="363.61" y="255.5" >__clone</text>
</g>
<g >
<title>cpputil::tcc::TccCache::refresh (4 samples, 1.28%)</title><rect x="424.7" y="197" width="15.1" height="15.0" fill="rgb(216,148,26)" rx="2" ry="2" />
<text  x="427.70" y="207.5" ></text>
</g>
<g >
<title>__pthread_disable_asynccancel (1 samples, 0.32%)</title><rect x="123.1" y="213" width="3.8" height="15.0" fill="rgb(235,30,26)" rx="2" ry="2" />
<text  x="126.10" y="223.5" ></text>
</g>
<g >
<title>__nanosleep (4 samples, 1.28%)</title><rect x="650.9" y="181" width="15.1" height="15.0" fill="rgb(250,132,30)" rx="2" ry="2" />
<text  x="653.89" y="191.5" ></text>
</g>
<g >
<title>native_irq_return_iret (20 samples, 6.39%)</title><rect x="699.9" y="165" width="75.4" height="15.0" fill="rgb(252,88,0)" rx="2" ry="2" />
<text  x="702.90" y="175.5" >native_i..</text>
</g>
<g >
<title>curl_easy_perform (11 samples, 3.51%)</title><rect x="262.6" y="165" width="41.5" height="15.0" fill="rgb(245,11,15)" rx="2" ry="2" />
<text  x="265.59" y="175.5" >cur..</text>
</g>
<g >
<title>knitter_dag.497 (18 samples, 5.75%)</title><rect x="356.8" y="277" width="67.9" height="15.0" fill="rgb(218,119,1)" rx="2" ry="2" />
<text  x="359.84" y="287.5" >knitter..</text>
</g>
<g >
<title>native_irq_return_iret (9 samples, 2.88%)</title><rect x="164.6" y="165" width="33.9" height="15.0" fill="rgb(208,157,49)" rx="2" ry="2" />
<text  x="167.57" y="175.5" >na..</text>
</g>
<g >
<title>syscall_return_via_sysret (16 samples, 5.11%)</title><rect x="1069.4" y="181" width="60.3" height="15.0" fill="rgb(205,27,14)" rx="2" ry="2" />
<text  x="1072.36" y="191.5" >syscal..</text>
</g>
<g >
<title>folly::fibers::Baton::wait (1 samples, 0.32%)</title><rect x="884.6" y="181" width="3.8" height="15.0" fill="rgb(250,91,37)" rx="2" ry="2" />
<text  x="887.63" y="191.5" ></text>
</g>
<g >
<title>pthread_cond_timedwait@@GLIBC_2.3.2 (4 samples, 1.28%)</title><rect x="123.1" y="229" width="15.1" height="15.0" fill="rgb(205,35,5)" rx="2" ry="2" />
<text  x="126.10" y="239.5" ></text>
</g>
<g >
<title>native_irq_return_iret (6 samples, 1.92%)</title><rect x="224.9" y="117" width="22.6" height="15.0" fill="rgb(215,153,32)" rx="2" ry="2" />
<text  x="227.89" y="127.5" >n..</text>
</g>
<g >
<title>__nanosleep (4 samples, 1.28%)</title><rect x="605.7" y="165" width="15.0" height="15.0" fill="rgb(211,193,0)" rx="2" ry="2" />
<text  x="608.65" y="175.5" ></text>
</g>
<g >
<title>__pthread_disable_asynccancel (2 samples, 0.64%)</title><rect x="692.4" y="165" width="7.5" height="15.0" fill="rgb(251,73,4)" rx="2" ry="2" />
<text  x="695.36" y="175.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (1 samples, 0.32%)</title><rect x="617.0" y="149" width="3.7" height="15.0" fill="rgb(221,182,20)" rx="2" ry="2" />
<text  x="619.96" y="159.5" ></text>
</g>
<g >
<title>start_thread (4 samples, 1.28%)</title><rect x="10.0" y="229" width="15.1" height="15.0" fill="rgb(237,171,54)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>ms::RealTimeGroupCache::async_update_data (8 samples, 2.56%)</title><rect x="1129.7" y="245" width="30.1" height="15.0" fill="rgb(237,3,23)" rx="2" ry="2" />
<text  x="1132.68" y="255.5" >ms..</text>
</g>
<g >
<title>cpputil::db2::redisproto::ConfReloader::run (16 samples, 5.11%)</title><rect x="153.3" y="197" width="60.3" height="15.0" fill="rgb(246,190,33)" rx="2" ry="2" />
<text  x="156.26" y="207.5" >cpputi..</text>
</g>
<g >
<title>__nanosleep (17 samples, 5.43%)</title><rect x="820.5" y="181" width="64.1" height="15.0" fill="rgb(235,31,6)" rx="2" ry="2" />
<text  x="823.54" y="191.5" >__nanos..</text>
</g>
<g >
<title>cpputil::consul::make_request (12 samples, 3.83%)</title><rect x="213.6" y="213" width="45.2" height="15.0" fill="rgb(208,43,32)" rx="2" ry="2" />
<text  x="216.58" y="223.5" >cppu..</text>
</g>
<g >
<title>start_thread (4 samples, 1.28%)</title><rect x="1174.9" y="229" width="15.1" height="15.0" fill="rgb(246,85,3)" rx="2" ry="2" />
<text  x="1177.92" y="239.5" ></text>
</g>
<g >
<title>__sleep (4 samples, 1.28%)</title><rect x="1129.7" y="229" width="15.1" height="15.0" fill="rgb(232,79,20)" rx="2" ry="2" />
<text  x="1132.68" y="239.5" ></text>
</g>
<g >
<title>cpputil::metrics2::MetricCollector::emit_async_message (2 samples, 0.64%)</title><rect x="345.5" y="197" width="7.6" height="15.0" fill="rgb(249,183,47)" rx="2" ry="2" />
<text  x="348.53" y="207.5" ></text>
</g>
<g >
<title>std::locale::locale (1 samples, 0.32%)</title><rect x="349.3" y="149" width="3.8" height="15.0" fill="rgb(249,181,44)" rx="2" ry="2" />
<text  x="352.30" y="159.5" ></text>
</g>
<g >
<title>__nanosleep (30 samples, 9.58%)</title><rect x="462.4" y="181" width="113.1" height="15.0" fill="rgb(214,115,46)" rx="2" ry="2" />
<text  x="465.40" y="191.5" >__nanosleep</text>
</g>
<g >
<title>[unknown] (18 samples, 5.75%)</title><rect x="356.8" y="261" width="67.9" height="15.0" fill="rgb(249,82,52)" rx="2" ry="2" />
<text  x="359.84" y="271.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (4 samples, 1.28%)</title><rect x="123.1" y="261" width="15.1" height="15.0" fill="rgb(240,151,38)" rx="2" ry="2" />
<text  x="126.10" y="271.5" ></text>
</g>
<g >
<title>execute_native_thread_routine (118 samples, 37.70%)</title><rect x="439.8" y="213" width="444.8" height="15.0" fill="rgb(227,37,49)" rx="2" ry="2" />
<text  x="442.78" y="223.5" >execute_native_thread_routine</text>
</g>
<g >
<title>folly::fibers::Baton::wait&lt;folly::fibers::Baton::wait (1 samples, 0.32%)</title><rect x="884.6" y="165" width="3.8" height="15.0" fill="rgb(208,142,6)" rx="2" ry="2" />
<text  x="887.63" y="175.5" ></text>
</g>
<g >
<title>cpputil::consul::ServiceDiscovery::translateName (12 samples, 3.83%)</title><rect x="213.6" y="229" width="45.2" height="15.0" fill="rgb(222,165,35)" rx="2" ry="2" />
<text  x="216.58" y="239.5" >cppu..</text>
</g>
<g >
<title>T5.AIO (8 samples, 2.56%)</title><rect x="77.9" y="277" width="30.1" height="15.0" fill="rgb(221,81,50)" rx="2" ry="2" />
<text  x="80.86" y="287.5" >T5..</text>
</g>
<g >
<title>__pthread_disable_asynccancel (1 samples, 0.32%)</title><rect x="160.8" y="165" width="3.8" height="15.0" fill="rgb(224,40,45)" rx="2" ry="2" />
<text  x="163.80" y="175.5" ></text>
</g>
<g >
<title>[unknown] (28 samples, 8.95%)</title><rect x="153.3" y="261" width="105.5" height="15.0" fill="rgb(235,94,4)" rx="2" ry="2" />
<text  x="156.26" y="271.5" >[unknown]</text>
</g>
<g >
<title>cpputil::consul::translate_one_with_timeout (12 samples, 3.83%)</title><rect x="32.6" y="245" width="45.3" height="15.0" fill="rgb(230,23,42)" rx="2" ry="2" />
<text  x="35.62" y="255.5" >cppu..</text>
</g>
<g >
<title>Curl_poll (11 samples, 3.51%)</title><rect x="262.6" y="133" width="41.5" height="15.0" fill="rgb(209,110,29)" rx="2" ry="2" />
<text  x="265.59" y="143.5" >Cur..</text>
</g>
<g >
<title>__new_sem_wait_slow (4 samples, 1.28%)</title><rect x="108.0" y="165" width="15.1" height="15.0" fill="rgb(225,67,16)" rx="2" ry="2" />
<text  x="111.02" y="175.5" ></text>
</g>
<g >
<title>__nanosleep (4 samples, 1.28%)</title><rect x="1129.7" y="213" width="15.1" height="15.0" fill="rgb(213,111,51)" rx="2" ry="2" />
<text  x="1132.68" y="223.5" ></text>
</g>
<g >
<title>native_irq_return_iret (5 samples, 1.60%)</title><rect x="579.3" y="165" width="18.8" height="15.0" fill="rgb(254,217,30)" rx="2" ry="2" />
<text  x="582.27" y="175.5" ></text>
</g>
<g >
<title>folly::detail::MemoryIdler::futexWaitPreIdle&lt;std::atomic, std::chrono::time_point&lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (1 samples, 0.32%)</title><rect x="884.6" y="117" width="3.8" height="15.0" fill="rgb(254,212,6)" rx="2" ry="2" />
<text  x="887.63" y="127.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (4 samples, 1.28%)</title><rect x="402.1" y="165" width="15.1" height="15.0" fill="rgb(237,229,3)" rx="2" ry="2" />
<text  x="405.08" y="175.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (1 samples, 0.32%)</title><rect x="436.0" y="165" width="3.8" height="15.0" fill="rgb(234,13,26)" rx="2" ry="2" />
<text  x="439.01" y="175.5" ></text>
</g>
<g >
<title>cpputil::db2::redisproto::RandomRedisConnectionPool::get_connection (4 samples, 1.28%)</title><rect x="1144.8" y="181" width="15.0" height="15.0" fill="rgb(205,184,54)" rx="2" ry="2" />
<text  x="1147.76" y="191.5" ></text>
</g>
<g >
<title>_IO_vsnprintf (1 samples, 0.32%)</title><rect x="356.8" y="245" width="3.8" height="15.0" fill="rgb(226,90,0)" rx="2" ry="2" />
<text  x="359.84" y="255.5" ></text>
</g>
<g >
<title>cpputil::db2::redisproto::RedisClient::pipeline (4 samples, 1.28%)</title><rect x="1144.8" y="213" width="15.0" height="15.0" fill="rgb(237,88,49)" rx="2" ry="2" />
<text  x="1147.76" y="223.5" ></text>
</g>
<g >
<title>pthread_cond_timedwait@@GLIBC_2.3.2 (16 samples, 5.11%)</title><rect x="153.3" y="181" width="60.3" height="15.0" fill="rgb(222,80,2)" rx="2" ry="2" />
<text  x="156.26" y="191.5" >pthrea..</text>
</g>
<g >
<title>__clone (4 samples, 1.28%)</title><rect x="138.2" y="245" width="15.1" height="15.0" fill="rgb(252,96,30)" rx="2" ry="2" />
<text  x="141.18" y="255.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (1 samples, 0.32%)</title><rect x="315.4" y="213" width="3.7" height="15.0" fill="rgb(218,79,9)" rx="2" ry="2" />
<text  x="318.37" y="223.5" ></text>
</g>
<g >
<title>std::locale::_S_initialize (1 samples, 0.32%)</title><rect x="349.3" y="133" width="3.8" height="15.0" fill="rgb(219,125,53)" rx="2" ry="2" />
<text  x="352.30" y="143.5" ></text>
</g>
<g >
<title>[unknown] (10 samples, 3.19%)</title><rect x="319.1" y="261" width="37.7" height="15.0" fill="rgb(235,8,0)" rx="2" ry="2" />
<text  x="322.14" y="271.5" >[un..</text>
</g>
<g >
<title>start_thread (16 samples, 5.11%)</title><rect x="153.3" y="229" width="60.3" height="15.0" fill="rgb(213,136,18)" rx="2" ry="2" />
<text  x="156.26" y="239.5" >start_..</text>
</g>
<g >
<title>cpputil::db2::redisproto::RedisPipeline::init (4 samples, 1.28%)</title><rect x="1144.8" y="197" width="15.0" height="15.0" fill="rgb(236,223,5)" rx="2" ry="2" />
<text  x="1147.76" y="207.5" ></text>
</g>
<g >
<title>Curl_poll (12 samples, 3.83%)</title><rect x="32.6" y="149" width="45.3" height="15.0" fill="rgb(227,32,46)" rx="2" ry="2" />
<text  x="35.62" y="159.5" >Curl..</text>
</g>
<g >
<title>cpputil::db2::redisproto::RedisConnection::connect (4 samples, 1.28%)</title><rect x="1144.8" y="133" width="15.0" height="15.0" fill="rgb(213,22,43)" rx="2" ry="2" />
<text  x="1147.76" y="143.5" ></text>
</g>
<g >
<title>cpputil::consul::make_request (11 samples, 3.51%)</title><rect x="262.6" y="213" width="41.5" height="15.0" fill="rgb(252,46,4)" rx="2" ry="2" />
<text  x="265.59" y="223.5" >cpp..</text>
</g>
<g >
<title>__pthread_disable_asynccancel (1 samples, 0.32%)</title><rect x="108.0" y="133" width="3.8" height="15.0" fill="rgb(225,141,9)" rx="2" ry="2" />
<text  x="111.02" y="143.5" ></text>
</g>
<g >
<title>__nanosleep (4 samples, 1.28%)</title><rect x="635.8" y="165" width="15.1" height="15.0" fill="rgb(210,128,45)" rx="2" ry="2" />
<text  x="638.81" y="175.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (1 samples, 0.32%)</title><rect x="1186.2" y="133" width="3.8" height="15.0" fill="rgb(217,84,7)" rx="2" ry="2" />
<text  x="1189.23" y="143.5" ></text>
</g>
<g >
<title>__libc_disable_asynccancel (2 samples, 0.64%)</title><rect x="36.4" y="117" width="7.5" height="15.0" fill="rgb(254,12,20)" rx="2" ry="2" />
<text  x="39.39" y="127.5" ></text>
</g>
<g >
<title>execute_native_thread_routine (4 samples, 1.28%)</title><rect x="10.0" y="213" width="15.1" height="15.0" fill="rgb(221,207,43)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>sort_service (195 samples, 62.30%)</title><rect x="439.8" y="277" width="735.1" height="15.0" fill="rgb(209,116,44)" rx="2" ry="2" />
<text  x="442.78" y="287.5" >sort_service</text>
</g>
<g >
<title>folly::detail::Futex&lt;std::atomic&gt;::futexWaitImpl&lt;std::chrono::time_point&lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; &gt; (1 samples, 0.32%)</title><rect x="884.6" y="85" width="3.8" height="15.0" fill="rgb(212,195,47)" rx="2" ry="2" />
<text  x="887.63" y="95.5" ></text>
</g>
<g >
<title>LOGCXX::Logger::Cosume (36 samples, 11.50%)</title><rect x="439.8" y="197" width="135.7" height="15.0" fill="rgb(231,35,0)" rx="2" ry="2" />
<text  x="442.78" y="207.5" >LOGCXX::Logger::C..</text>
</g>
<g >
<title>[unknown] (16 samples, 5.11%)</title><rect x="258.8" y="261" width="60.3" height="15.0" fill="rgb(227,211,17)" rx="2" ry="2" />
<text  x="261.82" y="271.5" >[unkno..</text>
</g>
<g >
<title>syscall_return_via_sysret (1 samples, 0.32%)</title><rect x="647.1" y="149" width="3.8" height="15.0" fill="rgb(213,15,22)" rx="2" ry="2" />
<text  x="650.12" y="159.5" ></text>
</g>
<g >
<title>native_irq_return_iret (2 samples, 0.64%)</title><rect x="13.8" y="165" width="7.5" height="15.0" fill="rgb(252,59,25)" rx="2" ry="2" />
<text  x="16.77" y="175.5" ></text>
</g>
<g >
<title>native_irq_return_iret (2 samples, 0.64%)</title><rect x="1148.5" y="37" width="7.6" height="15.0" fill="rgb(245,104,28)" rx="2" ry="2" />
<text  x="1151.53" y="47.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (1 samples, 0.32%)</title><rect x="1156.1" y="37" width="3.7" height="15.0" fill="rgb(206,24,7)" rx="2" ry="2" />
<text  x="1159.07" y="47.5" ></text>
</g>
<g >
<title>api::GroupInfoRetrieverLMC::back_update (9 samples, 2.88%)</title><rect x="319.1" y="245" width="34.0" height="15.0" fill="rgb(218,151,23)" rx="2" ry="2" />
<text  x="322.14" y="255.5" >ap..</text>
</g>
<g >
<title>native_irq_return_iret (2 samples, 0.64%)</title><rect x="654.7" y="165" width="7.5" height="15.0" fill="rgb(211,67,41)" rx="2" ry="2" />
<text  x="657.66" y="175.5" ></text>
</g>
<g >
<title>nanosleep@plt (1 samples, 0.32%)</title><rect x="1159.8" y="245" width="3.8" height="15.0" fill="rgb(232,193,22)" rx="2" ry="2" />
<text  x="1162.84" y="255.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (3 samples, 0.96%)</title><rect x="247.5" y="117" width="11.3" height="15.0" fill="rgb(205,147,48)" rx="2" ry="2" />
<text  x="250.51" y="127.5" ></text>
</g>
<g >
<title>execute_native_thread_routine (8 samples, 2.56%)</title><rect x="77.9" y="213" width="30.1" height="15.0" fill="rgb(230,103,4)" rx="2" ry="2" />
<text  x="80.86" y="223.5" >ex..</text>
</g>
<g >
<title>native_irq_return_iret (2 samples, 0.64%)</title><rect x="609.4" y="149" width="7.6" height="15.0" fill="rgb(222,213,39)" rx="2" ry="2" />
<text  x="612.42" y="159.5" ></text>
</g>
<g >
<title>__poll (11 samples, 3.51%)</title><rect x="262.6" y="117" width="41.5" height="15.0" fill="rgb(212,15,23)" rx="2" ry="2" />
<text  x="265.59" y="127.5" >__p..</text>
</g>
<g >
<title>__nanosleep (7 samples, 2.24%)</title><rect x="319.1" y="229" width="26.4" height="15.0" fill="rgb(250,60,33)" rx="2" ry="2" />
<text  x="322.14" y="239.5" >_..</text>
</g>
<g >
<title>__nanosleep (12 samples, 3.83%)</title><rect x="371.9" y="181" width="45.3" height="15.0" fill="rgb(232,15,22)" rx="2" ry="2" />
<text  x="374.92" y="191.5" >__na..</text>
</g>
<g >
<title>cpputil::metrics2::MetricClient::send_emit_message (2 samples, 0.64%)</title><rect x="345.5" y="165" width="7.6" height="15.0" fill="rgb(221,27,10)" rx="2" ry="2" />
<text  x="348.53" y="175.5" ></text>
</g>
<g >
<title>cpputil::consul::make_request (11 samples, 3.51%)</title><rect x="262.6" y="197" width="41.5" height="15.0" fill="rgb(231,214,52)" rx="2" ry="2" />
<text  x="265.59" y="207.5" >cpp..</text>
</g>
<g >
<title>native_irq_return_iret (2 samples, 0.64%)</title><rect x="639.6" y="149" width="7.5" height="15.0" fill="rgb(236,88,3)" rx="2" ry="2" />
<text  x="642.58" y="159.5" ></text>
</g>
<g >
<title>__errno_location (1 samples, 0.32%)</title><rect x="888.4" y="229" width="3.8" height="15.0" fill="rgb(243,193,31)" rx="2" ry="2" />
<text  x="891.40" y="239.5" ></text>
</g>
<g >
<title>txn_report (4 samples, 1.28%)</title><rect x="1174.9" y="277" width="15.1" height="15.0" fill="rgb(206,38,4)" rx="2" ry="2" />
<text  x="1177.92" y="287.5" ></text>
</g>
<g >
<title>api::AuthorUserInfoRetrieverLRU::back_update (15 samples, 4.79%)</title><rect x="360.6" y="197" width="56.6" height="15.0" fill="rgb(248,7,37)" rx="2" ry="2" />
<text  x="363.61" y="207.5" >api::..</text>
</g>
<g >
<title>__clone (4 samples, 1.28%)</title><rect x="1174.9" y="245" width="15.1" height="15.0" fill="rgb(219,218,48)" rx="2" ry="2" />
<text  x="1177.92" y="255.5" ></text>
</g>
<g >
<title>folly::detail::(anonymous namespace)::nativeFutexWaitImpl (1 samples, 0.32%)</title><rect x="884.6" y="53" width="3.8" height="15.0" fill="rgb(231,164,29)" rx="2" ry="2" />
<text  x="887.63" y="63.5" ></text>
</g>
<g >
<title>__sleep (4 samples, 1.28%)</title><rect x="635.8" y="181" width="15.1" height="15.0" fill="rgb(248,100,21)" rx="2" ry="2" />
<text  x="638.81" y="191.5" ></text>
</g>
<g >
<title>__clone (16 samples, 5.11%)</title><rect x="153.3" y="245" width="60.3" height="15.0" fill="rgb(233,214,17)" rx="2" ry="2" />
<text  x="156.26" y="255.5" >__clone</text>
</g>
<g >
<title>cpputil::intervene::EcologyControl::content_control_retrieve (1 samples, 0.32%)</title><rect x="884.6" y="245" width="3.8" height="15.0" fill="rgb(219,98,13)" rx="2" ry="2" />
<text  x="887.63" y="255.5" ></text>
</g>
<g >
<title>__pthread_disable_asynccancel (8 samples, 2.56%)</title><rect x="918.6" y="181" width="30.1" height="15.0" fill="rgb(249,154,11)" rx="2" ry="2" />
<text  x="921.56" y="191.5" >__..</text>
</g>
<g >
<title>syscall_return_via_sysret (9 samples, 2.88%)</title><rect x="541.6" y="165" width="33.9" height="15.0" fill="rgb(212,51,30)" rx="2" ry="2" />
<text  x="544.57" y="175.5" >sy..</text>
</g>
<g >
<title>syscall_return_via_sysret (10 samples, 3.19%)</title><rect x="775.3" y="165" width="37.7" height="15.0" fill="rgb(217,83,8)" rx="2" ry="2" />
<text  x="778.30" y="175.5" >sys..</text>
</g>
<g >
<title>cpputil::bytedtrace::reporter::AgentReporter::flushTxns (4 samples, 1.28%)</title><rect x="1174.9" y="197" width="15.1" height="15.0" fill="rgb(225,3,37)" rx="2" ry="2" />
<text  x="1177.92" y="207.5" ></text>
</g>
<g >
<title>[unknown] (192 samples, 61.34%)</title><rect x="439.8" y="261" width="723.8" height="15.0" fill="rgb(245,97,45)" rx="2" ry="2" />
<text  x="442.78" y="271.5" >[unknown]</text>
</g>
<g >
<title>cpputil::consul::make_request (12 samples, 3.83%)</title><rect x="32.6" y="213" width="45.3" height="15.0" fill="rgb(241,48,19)" rx="2" ry="2" />
<text  x="35.62" y="223.5" >cppu..</text>
</g>
<g >
<title>__clone (4 samples, 1.28%)</title><rect x="108.0" y="245" width="15.1" height="15.0" fill="rgb(251,148,20)" rx="2" ry="2" />
<text  x="111.02" y="255.5" ></text>
</g>
<g >
<title>archon_stats (4 samples, 1.28%)</title><rect x="123.1" y="277" width="15.1" height="15.0" fill="rgb(205,57,16)" rx="2" ry="2" />
<text  x="126.10" y="287.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (1 samples, 0.32%)</title><rect x="345.5" y="133" width="3.8" height="15.0" fill="rgb(245,2,17)" rx="2" ry="2" />
<text  x="348.53" y="143.5" ></text>
</g>
<g >
<title>dts::DataTraceCollector::do_collect (64 samples, 20.45%)</title><rect x="888.4" y="245" width="241.3" height="15.0" fill="rgb(242,34,14)" rx="2" ry="2" />
<text  x="891.40" y="255.5" >dts::DataTraceCollector::do_coll..</text>
</g>
</g>
</svg>
